---
# need to manually remove old version AND their dependencies
# also libnvidia packages, some switches may cause older versions
# to be available in the repo, causing a conflict
# also libnccl as it does not depend on any CUDA package on the deb level
# but causes conflicts as it uses the same filename across CUDA versions

# TODO shouldn't be needed, remove once bug fixed
# https://github.com/ansible/ansible/issues/62262

# need to do this individually for these packages, because they're not available in the main cuda repo
# so they're from random repos and/or random deb files, and thus they may or may not be visible to apt
# and apt errors out if they aren't from a repo
# TODO we need separate registers for each, is there a way to register different variables in a loop?
- name: Check libcudnn availability
  shell: apt-cache search --names-only "libcudnn*"
  no_log: true
  changed_when: false
  register: purge_libcudnn

- name: Check libnccl availability
  shell: apt-cache search --names-only "libnccl*"
  no_log: true
  changed_when: false
  register: purge_libnccl

- name: Check libnvinfer availability
  shell: apt-cache search --names-only "libnvinfer*"
  no_log: true
  changed_when: false
  register: purge_libnvinfer

- name: Check libnvonnxparsers availability
  shell: apt-cache search --names-only "libnvonnxparsers*"
  no_log: true
  changed_when: false
  register: purge_libnvonnxparsers

- name: Check libnvparsers availability
  shell: apt-cache search --names-only "libnvparsers*"
  no_log: true
  changed_when: false
  register: purge_libnvparsers

- name: Check tensorrt availability
  shell: apt-cache search --names-only "tensorrt*"
  no_log: true
  changed_when: false
  register: purge_tensorrt

# These may or may not be available, they are not in the CUDA repo.
# But when they are installed, they must be purged first, otherwise the other purge fails.
# Edit: actually, this won't work either, tensorrt 6 depends on them
#- name: Uninstall optional NV libs
#  shell: apt purge -y --autoremove "libnvparsers*" "libnvonnxparsers*"
#  ignore_errors: yes
#  no_log: True

#- name: Uninstall mismatching NV packages
#  apt:
#    name: "{{ packages }}"
#    state: absent
#    autoremove: yes
#  vars:
#    packages:
#    - "nvidia-driver-*"
#    - "nvidia-*"
#    - "libnvidia-*"
#    - "libxnvctrl0"
#    - "libnvinfer*"
#    - "xserver-xorg-video-nvidia*"
#    - "tensorrt*"
#    - "cuda-*"

# the above command sometime fails even though it's supposed to be equivalent, so let's do it manually
# rc=100 when apt didn't find any package to remove, that's fine

- name: Uninstall mismatching NV packages
  shell: >
    apt purge -y --autoremove nvidia-* libnvidia-* libxnvctrl0 xserver-xorg-video-nvidia* cuda-*
    {% if purge_libcudnn.stdout_lines|length %}libcudnn*{% endif %}
    {% if purge_libnccl.stdout_lines|length %}libnccl*{% endif %}
    {% if purge_libnvinfer.stdout_lines|length %}libnvinfer*{% endif %}
    {% if purge_libnvonnxparsers.stdout_lines|length %}libnvonnxparsers*{% endif %}
    {% if purge_libnvparsers.stdout_lines|length %}libnvparsers*{% endif %}
    {% if purge_tensorrt.stdout_lines|length %}tensorrt*{% endif %}
  register: nv_purge
  failed_when: (nv_purge.rc != 0) and (nv_purge.rc != 100)

# when no nv/cuda package is installed, it's better to nuke this altogether
# because the runfile also installs to /usr/local/cuda
- name: Find /usr/local/cuda directories
  find:
    paths: /usr/local
    patterns: "cuda-*"
    file_type: directory
  register: cuda_dirs

- name: Purge /usr/local/cuda directories
  file:
    path: "{{ item.path }}"
    state: absent
  no_log: true
  with_items: "{{ cuda_dirs.files }}"
